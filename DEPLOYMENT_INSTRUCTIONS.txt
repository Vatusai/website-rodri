==============================================================================
VPS DEPLOYMENT INSTRUCTIONS FOR RODRIGO LAGUNAS WEBSITE
Ubuntu Server - /home/ubuntu directory
==============================================================================

This guide will help Claude AI deploy the Rodrigo Lagunas musician website 
on an Ubuntu VPS server with /home/ubuntu as the root directory.

PREREQUISITES:
- Ubuntu server with sudo privileges
- Domain name pointed to server IP
- SSH access to the server

==============================================================================
1. INITIAL SERVER SETUP
==============================================================================

# Update system packages
sudo apt update && sudo apt upgrade -y

# Install required packages
sudo apt install -y curl wget git nginx nodejs npm certbot python3-certbot-nginx

# Install Node.js 18 (recommended for Vite)
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs

# Verify installations
node --version
npm --version
nginx -v

==============================================================================
2. CLONE AND SETUP PROJECT
==============================================================================

# Navigate to home directory
cd /home/ubuntu

# Clone the repository
git clone https://github.com/Vatusai/website-rodri.git
cd website-rodri

# Install project dependencies
npm install

# Build the project for production
npm run build

# Verify build was successful
ls -la dist/

==============================================================================
3. NGINX CONFIGURATION
==============================================================================

# Create nginx configuration for the website
sudo nano /etc/nginx/sites-available/rodrigo-lagunas

# Add the following configuration (replace YOUR_DOMAIN with actual domain):
# --------------------------------------------------------------------------
server {
    listen 80;
    server_name YOUR_DOMAIN www.YOUR_DOMAIN;
    root /home/ubuntu/website-rodri/dist;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss;

    # Handle React Router (SPA)
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
}
# --------------------------------------------------------------------------

# Enable the site
sudo ln -s /etc/nginx/sites-available/rodrigo-lagunas /etc/nginx/sites-enabled/

# Remove default nginx site
sudo rm /etc/nginx/sites-enabled/default

# Test nginx configuration
sudo nginx -t

# Restart nginx
sudo systemctl restart nginx
sudo systemctl enable nginx

==============================================================================
4. SSL CERTIFICATE WITH CERTBOT
==============================================================================

# Obtain SSL certificate (replace YOUR_DOMAIN with actual domain)
sudo certbot --nginx -d YOUR_DOMAIN -d www.YOUR_DOMAIN

# Verify auto-renewal
sudo certbot renew --dry-run

# Set up automatic renewal
sudo crontab -e
# Add this line:
# 0 12 * * * /usr/bin/certbot renew --quiet

==============================================================================
5. FIREWALL CONFIGURATION
==============================================================================

# Configure UFW firewall
sudo ufw allow 'Nginx Full'
sudo ufw allow OpenSSH
sudo ufw --force enable

# Verify firewall status
sudo ufw status

==============================================================================
6. DEPLOYMENT SCRIPT FOR FUTURE UPDATES
==============================================================================

# Create deployment script
nano /home/ubuntu/deploy.sh

# Add the following content:
# --------------------------------------------------------------------------
#!/bin/bash
echo "Deploying Rodrigo Lagunas Website..."

# Navigate to project directory
cd /home/ubuntu/website-rodri

# Pull latest changes
git pull origin main

# Install any new dependencies
npm install

# Build the project
npm run build

# Restart nginx to clear any caches
sudo systemctl reload nginx

echo "Deployment completed successfully!"
echo "Website is live at: https://YOUR_DOMAIN"
# --------------------------------------------------------------------------

# Make script executable
chmod +x /home/ubuntu/deploy.sh

==============================================================================
7. MONITORING AND MAINTENANCE
==============================================================================

# Check nginx status
sudo systemctl status nginx

# Check nginx error logs
sudo tail -f /var/log/nginx/error.log

# Check nginx access logs
sudo tail -f /var/log/nginx/access.log

# Check SSL certificate status
sudo certbot certificates

# Monitor disk usage
df -h

# Monitor system resources
htop

==============================================================================
8. BACKUP STRATEGY
==============================================================================

# Create backup script
nano /home/ubuntu/backup.sh

# Add the following content:
# --------------------------------------------------------------------------
#!/bin/bash
BACKUP_DIR="/home/ubuntu/backups"
DATE=$(date +%Y%m%d_%H%M%S)

# Create backup directory
mkdir -p $BACKUP_DIR

# Backup website files
tar -czf $BACKUP_DIR/website_$DATE.tar.gz -C /home/ubuntu website-rodri

# Backup nginx configuration
sudo cp /etc/nginx/sites-available/rodrigo-lagunas $BACKUP_DIR/nginx_config_$DATE

# Keep only last 7 backups
find $BACKUP_DIR -name "website_*.tar.gz" -mtime +7 -delete
find $BACKUP_DIR -name "nginx_config_*" -mtime +7 -delete

echo "Backup completed: $BACKUP_DIR/website_$DATE.tar.gz"
# --------------------------------------------------------------------------

# Make backup script executable
chmod +x /home/ubuntu/backup.sh

# Set up weekly backup (run every Sunday at 2 AM)
sudo crontab -e
# Add this line:
# 0 2 * * 0 /home/ubuntu/backup.sh

==============================================================================
9. PERFORMANCE OPTIMIZATION
==============================================================================

# Install and configure Redis for caching (optional)
sudo apt install redis-server
sudo systemctl enable redis-server

# Configure log rotation for nginx
sudo nano /etc/logrotate.d/nginx-custom
# Add:
# /var/log/nginx/*.log {
#     daily
#     missingok
#     rotate 7
#     compress
#     notifempty
#     create 644 www-data www-data
#     postrotate
#         systemctl reload nginx
#     endscript
# }

==============================================================================
10. TROUBLESHOOTING
==============================================================================

# Common issues and solutions:

1. "502 Bad Gateway" or "504 Gateway Timeout"
   - Check nginx error logs: sudo tail -f /var/log/nginx/error.log
   - Restart nginx: sudo systemctl restart nginx

2. Build errors during deployment
   - Clear npm cache: npm cache clean --force
   - Delete node_modules and reinstall: rm -rf node_modules && npm install

3. Permission errors
   - Fix file permissions: sudo chown -R ubuntu:ubuntu /home/ubuntu/website-rodri
   - Fix nginx permissions: sudo chown -R www-data:www-data /home/ubuntu/website-rodri/dist

4. SSL certificate issues
   - Renew certificate: sudo certbot renew
   - Check certificate: sudo certbot certificates

5. High memory usage
   - Monitor with: free -h
   - Restart services: sudo systemctl restart nginx

==============================================================================
11. FINAL VERIFICATION
==============================================================================

After deployment, verify everything works:

1. Visit https://YOUR_DOMAIN
2. Check mobile responsiveness
3. Verify all animations work (glowing spores, preloader, etc.)
4. Test navigation and contact forms
5. Check browser developer tools for errors
6. Test page load speed with GTmetrix or PageSpeed Insights

==============================================================================
12. QUICK DEPLOYMENT COMMANDS
==============================================================================

# For Claude AI - run these commands in sequence:

# 1. Initial setup (run once)
cd /home/ubuntu && git clone https://github.com/Vatusai/website-rodri.git && cd website-rodri && npm install && npm run build

# 2. Configure nginx (replace YOUR_DOMAIN first)
sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/rodrigo-lagunas

# 3. Deploy updates (run for updates)
cd /home/ubuntu/website-rodri && git pull && npm install && npm run build && sudo systemctl reload nginx

IMPORTANT NOTES:
- Replace ALL instances of "YOUR_DOMAIN" with the actual domain name
- Ensure DNS records point to the server IP before running certbot
- The website features mobile-optimized design with glowing spore animations
- All static assets are properly cached and compressed
- The build includes preloader, responsive design, and interactive elements

WEBSITE FEATURES INCLUDED:
✅ Mobile-first responsive design
✅ Fixed mobile scrollbar issues  
✅ Glowing spore background animations (dark red, purple, blue)
✅ Hero section with gradient text effects
✅ Interactive preloader with musical themes
✅ Contact wizard and floating action button
✅ Optimized for performance and SEO
✅ Professional musician portfolio layout

==============================================================================